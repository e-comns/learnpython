{"metadata":{"language_info":{"name":"python","version":"3.7.8","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"\"\"\"#fundamental data types\nint\nfloat\nbool\nstr\nlist\ntuple\nset\ndict\n\n#Classes -> custom types\n\n#Specialized data types\n\nNone - data type for no value\n\n#Functions and some build it functions\n\ntype - gives you info about data type\nround - math build in function gives us round numbers from float etc.\"\"\"","metadata":{"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"'#fundamental data types\\nint\\nfloat\\nbool\\nstr\\nlist\\ntuple\\nset\\ndict\\n\\n#Classes -> custom types\\n\\n#Specialized data types\\n\\nNone - data type for no value\\n\\n#Functions and some build it functions\\n\\ntype - gives you info about data type\\nround - math build in function gives us round numbers from float etc.'"},"metadata":{}}]},{"cell_type":"code","source":"# \"\"\"Simple birth_year calculator\"\"\"\n\nbirth_year = input('Whats you birth year?: ') # input is consider as a string!\n\ncurent_year = 2020\n\ncalc = curent_year - int(birth_year)\n\nprint(f'Your are {calc} years old!')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# \"\"\"Simple password lenght and hiden display\"\"\"\n\nname = input('What is your name?: ')\n\npassword = len(input('Enter password?: '))\n\nPASS_SHOW = password * '*'  # Constant always show '*'\n\nprint(f'Hi {name} your password: {PASS_SHOW} is {password} charcater long!')","metadata":{"trusted":true},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdin","text":"What is your name?:  as\nEnter password?:  as\n"},{"name":"stdout","text":"Hi as your password: ** is 2 charcater long!\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"Lists\"\"\"\n\n# List slicing, strings in list can be mutable\n\nshoping_chart = [\n  'Milk',\n  'Bread',\n  'Suncream'\n]\n\nshoping_chart[0] = 'Glass' # Changing first article\nprint(shoping_chart)","metadata":{"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"['Glass', 'Bread', 'Suncream']\n","output_type":"stream"}]},{"cell_type":"code","source":"\"\"\"MATRIX multiple lists\"\"\"\n\nmatrix = [\n   [1,2,3],\n   [7,4,1],\n   ['a','b','c']\n]\nprint(matrix[0][2])\n\n# Adding, removing, inserting objects in lists\n\nbasket = [\n    1,2,3,4,5\n]\nnew_list = basket.append(100) # https://www.w3schools.com/python/python_ref_list.asp\nprint(basket)\n\nbasket.pop() #removes last if not specified, specified with index, can return value!\nbasket.remove() #removes by specified value, NONE value!\nbasket.clear() #removes complitly everything from basket, NONE value!\n\n","metadata":{"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"3\n[1, 2, 3, 4, 5, 100]\n","output_type":"stream"}]},{"cell_type":"code","source":"# EXERCISE using this list \nbasket = [\"Banana\", \"Apples\", \"Oranges\", \"Blueberries\"];\n\n# 1. Remove the Banana from the list\n\n# 2. Remove \"Blueberries\" from the list.\n\n# 3. Put \"Kiwi\" at the end of the list.\n\n# 4. Add \"Apples\" at the beginning of the list\n\n# 5. Count how many apples in the basket\n\n# 6. empty the basket\n\nbasket.remove('Banana')\nbasket.pop()           #no need for \"remove\" because \"pop\" removes the last one!\nbasket.append('Kiwi')\nbasket.insert(0, 'Apples')\nbasket.count('n')      #counts how many specified letter are in list in this case 'n'!\nbasket.clear()\nbasket.copy()          #copy's basket list into if we like new variable!\nbasket.reverse()       #swiching indexes reverse not sorting!\nbasket_price = 10.join(['milk', 'Bread']) #join number with ithems!\n\nprint(basket)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# EXERCISE fix this code so that it prints a sorted list of all of our friends (alphabetical). Scroll to see answer\nfriends = ['Simon', 'Patty', 'Joy', 'Carrie', 'Amira', 'Chu']\n\nnew_friend = ['Stanly']\n\nfriends.extend(new_friend)\n\nprint(sorted(friends))\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# DICTIONRIES\n#dictionaries uses key : pair values!\nuser = {\n    'basket': [1,2,3],\n    'greet': 'hello',\n    \n}\n\nprint(user.get('age', 55)) #if there is no 'age' 55 is set as a default for this method!\n     #user.keys\n     #user.values\n     #user.update({'age', 55}) - this updates dictionary  \n     #user.append() # ads to keys\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TUPLES\n\nuser = (1,2,3,4,5) #they are imutable cant be changed\n\nx,y,z,*other = user #can be riched as lists\n\n\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}